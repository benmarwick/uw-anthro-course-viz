[{"name":"app.R","content":"library(shiny)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(shadowtext)\nlibrary(stringr)\n\n\n# functions we need in the server --------------------------------------\n\n\nget_the_quarter_fn <- function(input_df, \n                               quarter = \"AU\"){\n  \n  new_names <- c( \"Course\" = \"Course..\" )\n  \n  input_df %>% \n    filter(Quarter == quarter) %>% \n    # drop rows with no times\n    filter(!is.na(Time.Start)) %>% \n    # drop empty rows\n    filter(!Time.Start == \"\") %>% \n    rename(any_of(new_names)) %>% \n    select(Course,\n           Title,\n           Mon:Fri, \n           Time.Start,\n           Time.End,\n           Quarter, \n           Prefix) %>% \n    pivot_longer(cols = Mon:Fri,\n                 names_to = \"day\") %>% \n    drop_na(value) %>% \n    # drop empty rows\n    filter(!value == \"\") %>% \n    mutate(day = factor(day, c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"))) %>% \n    mutate(crse1 = str_sub(Course, 1,1),\n           crse2 = str_sub(Course, 2,3),\n           Course = factor(Course)) %>% \n    group_by(crse1, crse2) %>% \n    filter(crse1 == min(crse1))  %>% \n    # convert times to a format R knows  <dttm>\n    mutate(Time.Start = as.POSIXct(strptime(Time.Start, format = \"%I:%M:%S %p\")),\n           Time.End =   as.POSIXct(strptime(Time.End,   format = \"%I:%M:%S %p\")))  \n}\n\nplot_the_schedule_fn <- function(quarter,\n                              dodge_width = 0.5){\n  \n  # Define start and end times for shading \n  start_time <- as.POSIXct( paste(Sys.Date(), \"08:00:00\") )\n  end_time <-   as.POSIXct( paste(Sys.Date(), \"17:00:00\") )\n  \n  # draw plot\n  ggplot(quarter, \n         aes(xmin   = Time.Start, \n             xmax   = Time.End, \n             y      = day,\n             label = Title)) +\n    scale_x_datetime(date_breaks = \"1 hour\",\n                     date_labels = \"%H\") +\n    annotate(\"rect\",\n             xmin =  start_time,\n             xmax =  end_time,\n             ymax = c(0.5, 2.5, 4.5),\n             ymin = c(1.5, 3.5, 5.5),\n             fill = \"grey80\",\n             alpha = 0.4) +\n    geom_linerange(aes(color = Course),\n                   position = position_dodge(width = dodge_width), \n                   size = 3) + \n    geom_shadowtext(aes(label = Course,\n                        x = Time.Start,\n                        group = Course),\n                    position = position_dodge2(width = dodge_width),\n                    size = 3,\n                    bg.colour= \"white\",\n                    colour = \"black\") +\n    scale_y_discrete(breaks = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"),\n                     labels = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"),\n                     drop=FALSE) +\n    labs(x = \"Time of day\",\n         y = \"\") +\n    theme_minimal() +\n    theme(legend.position = \"bottom\")  +\n    ggtitle(paste0(\"Class days and times for \", \n                   unique(quarter$Prefix), \n                   \" in the \",\n                   unique(quarter$Quarter),\n                   \" quarter\"))\n}\n\n# UI -------------------------------------------------------------------------\nui <- fluidPage(\n  titlePanel(\"UW Anthro Dept Course Scheduling Visualization App\"),\n  sidebarLayout(\n    sidebarPanel(\n      helpText(\n        tags$p(\n          \"First, go to one of our course planning sheets: \",\n          tags$a(\"ANTH\", \n                 href = \"https://docs.google.com/spreadsheets/d/1LEg20-MM1noo5Kq6W4MYFe4IUObB5ZveDj8uGZ75fPE/edit?gid=925449122#gid=925449122\",\n                 target=\"_blank\"),\", \", \n          tags$a(\"ARCHY\", \n                 href = \"https://docs.google.com/spreadsheets/d/1qu6Dl1ua2dLnkeR-j3ek1OJWAEVATlIdSJzjpH8CoAQ/edit?gid=1500143646#gid=1500143646\",\n                 target=\"_blank\"),\", \",        \n          tags$a(\"BIO A\", \n                 href = \"https://docs.google.com/spreadsheets/d/15UlwHFfsHngtT5VXnyLs6EinHqBtWuyOphy5ZaHLmXo/edit?gid=509696154#gid=509696154\",\n                 target=\"_blank\"),\".\",\n          tags$p(),       \n          \"Second, select all the cells for one sheet, and copy them to your clipboard (CTRL + c or CMD + c).\",\n          tags$p(),\n          \"Third, paste them into the box below.\",\n          tags$p(), \n          \"Fourth, click the 'Submit' button and plots should appear to the right.\",\n          tags$p(), \n         \"The source code for this app is freely available at\",\n          tags$a(\"https://github.com/benmarwick/uw-anthro-curriculum\", \n                 href = \"https://github.com/benmarwick/uw-anthro-curriculum\",\n                 target=\"_blank\"),\".\"\n        )),\n      textAreaInput(\"dataInput\", \n                    \"Paste data from the course planning sheet here:\"),\n      actionButton(\"submit\", \"Submit\")\n    ),\n    mainPanel(\n      plotOutput(\"plot1\"),\n      plotOutput(\"plot2\"),\n      plotOutput(\"plot3\"),\n      hr(),\n      tags$p(),\n      tags$p(\n        \"Here is the data that was pasted in from the spreadsheet:\"\n        ),\n      tags$p(),\n      DT::dataTableOutput(\"coursetable\")\n    )\n  )\n)\n\n# Server ----------------------------------------------------------------------\n\nserver <- function(input, output) {\n  \n  # get the data\n  dataInput <- eventReactive(input$submit, {\n    \n    tryCatch(\n      {\n        df <- read.delim(text = I(input$dataInput), \n                           sep = \"\\t\",\n                           header = TRUE)\n        df\n      },\n      error = function(e) {\n        showNotification(\"Error in data loading: Check your data format.\", type = \"error\")\n        NULL\n      }\n    )\n  })\n  \n  output$plot1 <- renderPlot({\n    if (!is.null(dataInput())) {\n      plot_the_schedule_fn(get_the_quarter_fn(input_df = dataInput(),\n                                              quarter = \"AU\"))\n    }\n  })\n  \n  output$plot2 <- renderPlot({\n    if (!is.null(dataInput())) {\n      plot_the_schedule_fn(get_the_quarter_fn(input_df = dataInput(),\n                                              quarter = \"WI\"))\n    }\n  })\n  \n  output$plot3 <- renderPlot({\n    if (!is.null(dataInput())) {\n      plot_the_schedule_fn(get_the_quarter_fn(input_df = dataInput(),\n                                              quarter = \"SP\"))\n    }\n  })\n  \n  output$coursetable = DT::renderDataTable({\n    if (!is.null(dataInput())) {\n    dataInput()\n    }\n  })\n  \n}\n\nshinyApp(ui = ui, server = server)\n\n\n# shinylive steps from https://posit-dev.github.io/r-shinylive/\n\n# generate site\n# shinylive::export(\".\", \"docs\")\n\n# deploy as github pages\n# usethis::use_github_action(url=\"https://github.com/posit-dev/r-shinylive/blob/actions-v1/examples/deploy-app.yaml\")\n\n# https://benmarwick.github.io/uw-anthro-course-viz\n\n# to debug in the browser, inspect and view console\n\n\n","type":"text"},{"name":"uw-anthro-course-viz.Rproj","content":"Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: knitr\nLaTeX: XeLaTeX\n","type":"text"}]
